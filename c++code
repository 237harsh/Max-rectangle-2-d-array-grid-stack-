class Solution{
  public:
  int fun(vector<int>&arr,int n)
{
    int max=0;
     vector<long long>sr(n,n),sl(n,-1);
      stack<long long>s1;
      stack<long long>s2;
      for(int i=n-1;i>=0;i--)
      {
         if(s1.empty())
         {
             sr[i]=n;
         }
         else if(arr[s1.top()]<arr[i])
            sr[i]=s1.top();
            
            else
            {
                while(!s1.empty()&&!(arr[s1.top()]<arr[i]))
                s1.pop();
                if(s1.empty())
                sr[i]=n;
                else
                sr[i]=s1.top();
                
            }
            
            s1.push(i);
      }
      
      for(int i=0;i<n;i++)
      {
         if(s2.empty())
         {
             sl[i]=-1;
         }
         else if(arr[s2.top()]<arr[i])
            sl[i]=s2.top();
            
            else
            {
                while(!s2.empty()&&!(arr[s2.top()]<arr[i]))
                s2.pop();
                if(s2.empty())
                sl[i]=-1;
                else
                sl[i]=s2.top();
                
            }
            
            s2.push(i);
      }
      
      for(int i=0;i<n;i++)
      {
          if((sr[i]-sl[i]-1)*arr[i]>max){
             max=(sr[i]-sl[i]-1)*arr[i];
          }
      }
      
   return max;     
}
    int maxArea(int M[MAX][MAX], int n, int m) {
        
        
       int max1=0;
         vector<int>arr(m,0);
   for(int i1=0;i1<n;i1++)
  {
   for(int j1=0;j1<m;j1++)
   {
       if(M[i1][j1]==0)
       {
           arr[j1]=0;
       }
       else 
       {
         arr[j1]=arr[j1]+ M[i1][j1]; 
       }
   }
   
   
   max1=max(max1,fun(arr,m));
  }
  
 return max1;
    }
}; 
